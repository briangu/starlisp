;;;; pong.ljsp
;; _Almost_ object-oriented... (i'm cheating my way with structs), and still got that nastyness of
;;         global variables in the absence of lexical scoping
;; vars: *pong-balls* *pong-players* 
;;       *pong-frame*
;;       *pong-timer*
;;       *pong-keys-down*
;;       +pong-screen-width+
;;       +pong-screen-height+

(require 'stuff)
(require 'struct)
(require 'java)

(setq +pong-screen-width+  640
      +pong-screen-height+ 480)

(defstruct pong-player
  (pos-x 10.0)
  (pos-y 30.0)
  (score 0)
  (racket-height 50.0)
  (wall (lambda (x y) (< x 10.0)))
  (up-key (field-value KeyEvent 'VK_RIGHT))
  (down-key (field-value KeyEvent 'VK_LEFT)))

(defstruct pong-ball
  (pos-x 0.0)
  (pos-y 0.0)
  (vel-x 0.0)
  (vel-y 0.0))

;; Wrap around the autogenerated constructor (ugly but works)
(setq %old-make-pong-ball make-pong-ball)
(defun make-pong-ball rst
  (let ((x (apply %old-make-pong-ball rst)))
    (push x *pong-balls*)
    x))

(defun kill-pong-ball (obj)
  (if (pong-ball? obj)
      (setq *pong-balls* (remove obj *pong-balls*))
      (error "Inte en boll"))
  nil)

(defun pong-ball-shape (ball)
  (send Rectangle2D$Double 'newInstance
                           (pong-ball-pos-x ball)
                           (pong-ball-pos-y ball)
                           5.0 5.0))

(defun pong-ball-act (b)
  (when (or (<= (pong-ball-pos-y b) 0) (>= (pong-ball-pos-y b) +pong-screen-height+))
    (pong-ball-set-vel-y b (- 0 (pong-ball-vel-y b))))
  (dolist (p *pong-players*)
    (cond ((send (pong-player-shape p) 'intersects (pong-ball-shape b))
           (pong-ball-set-vel-x b (- 0 (pong-ball-vel-x b))))
           (((pong-player-wall p) (pong-ball-pos-x b) (pong-ball-pos-y b))
            (kill-pong-ball b)
            (pong-player-dec-score p)
            (dolist (pp (remove p *pong-players*))
              (pong-player-inc-score p)))))
  (pong-ball-set-pos-x b (+ (pong-ball-pos-x b)
                            (pong-ball-vel-x b)))
  (pong-ball-set-pos-y b (+ (pong-ball-pos-y b)
                            (pong-ball-vel-y b))))

(defun pong-ball-draw (ball graphics)
  (send graphics 'fill (pong-ball-shape ball))
  nil)

;; Wrap around the autogenerated constructor
(setq %old-make-pong-player make-pong-player)
(defun make-pong-player rst
  (let ((x (apply %old-make-pong-player rst)))
    (push x *pong-players*)
    x))

(defun pong-player-shape (player)
  (send Rectangle2D$Double 'newInstance
                           (pong-player-pos-x player)
                           (pong-player-pos-y player)
                           5.0 (pong-player-racket-height player)))

(defun pong-player-act (p)
  (cond ((send *pong-keys-down* 'contains (pong-player-up-key p))
         (pong-player-set-pos-y p (- (pong-player-pos-y p) 3.0)))
        ((send *pong-keys-down* 'contains (pong-player-down-key p))
         (pong-player-set-pos-y p (+ (pong-player-pos-y p) 3.0)))))

(defun pong-player-draw (player graphics)
  (send g 'fill (pong-player-shape player))
  nil)

(defun pong-player-inc-score (p)
  (pong-player-set-score p (1+ (pong-player-score p))))

(defun pong-player-dec-score (p)
  (pong-player-set-score p (1- (pong-player-score p))))

;; (defun pong-player-pos-behind-wall? (p pos-x pos-y)
;;   ((pong-player-wall p) pos-x pos-y))

;; (defun pong-player-pos-behind-wall? (p pos-x pos-y)
;;   (let ((wall (pong-player-wall p)))
;;     ;; Maybe i should code a case-statement/macro for times like these
;;     (cond ((eq? (first wall) '<) (cond ((eq? (second wall) 'x) (< (third wall) pos-x))
;;                                        ((eq? (second wall) 'y) (< (third wall) pos-y))
;;                                        (t (error "I am error."))))
;;           ((eq? (first wall) '>) (cond ((eq? (second wall) 'x) (> (third wall) pos-x))
;;                                        ((eq? (second wall) 'y) (> (third wall) pos-y))  
;;                                        (t (error "I am error."))))
;;           (t (error "I am error")))))
          
    

;; (defun pong-act (obj)
;;   (cond ((pong-ball?   obj) (pong-ball-act obj))
;;         ((pong-player? obj) (pong-player-act obj))
;;         (t (error "Vet inte vad jag ska göra..."))))

;; (defun pong-draw (obj graphics)
;;   (cond ((pong-ball?   obj) (pong-ball-draw obj graphics))
;;         ((pong-player? obj) (pong-player-draw obj graphics))
;;         (t (error "Vet inte vad jag ska göra..."))))

(defun pong-update ()
  (let* ((bs (send *pong-frame* 'getBufferStrategy))
         (g  (send bs 'getDrawGraphics)))
    (send g 'clearRect 0 0 640 480)
    (dolist (x *pong-balls*)
      (pong-ball-act x)
      (pong-ball-draw x g))
    (dolist (x *pong-players*)
      (pong-player-act x)
      (pong-player-draw x g))
    (send g 'dispose)
    (send bs 'show)
    (send (send Toolkit 'getDefaultToolkit) 'sync)))
  
(defun pong ()
  (setq *pong-players*   nil
        *pong-frame*     (send JFrame 'newInstance "PAWNG")
        *pong-timer*     (send javax.swing.Timer 'newInstance 50 (make-listener (lambda (e) (pong-update))))
        ;; *pong-loop* (make-runnable (lambda ()
        ;;                              (pong-update)
        ;;                              (send Thread 'sleep 50)
        ;;                              (send EventQueue 'invokeLater *pong-loop*)))
        *pong-keys-down* (send HashSet 'newInstance))
  (with-object *pong-frame*
    (addWindowListener
     (make-listener (lambda (e)
                      (when (= (send e 'getID) (field-value WindowEvent 'WINDOW_CLOSED))
                        (send *pong-timer* 'stop)
                        (dolist (i '(*pong-frame* *pong-timer* *pong-keys-down* *pong-players* *pong-balls*))
                          (set i nil))))))
    (addKeyListener 
     (make-listener (lambda (e)
                      (let ((id (send e 'getID)))
                        (cond ((= id (field-value KeyEvent 'KEY_PRESSED))  (send *pong-keys-down* 'add (send e 'getKeyCode)))
                              ((= id (field-value KeyEvent 'KEY_RELEASED)) (send *pong-keys-down* 'remove (send e 'getKeyCode))))))))
    (setDefaultCloseOperation (field-value JFrame 'DISPOSE_ON_CLOSE))
    (setUndecorated t)
    (setSize 640 480)
    (setVisible t)
    (createBufferStrategy 2)
    (show))
  ;; (send EventQueue 'invokeLater *pong-loop*)
  (send *pong-timer* 'start))

(provide 'pong)
