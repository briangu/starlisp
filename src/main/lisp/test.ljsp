;;;; test.ljsp
;;; TODO: Test all the primitives exported from java

;; Do some bootstrapping to avoid depending in stuff.ljsp
;;; Bootstrapping BEGIN
(set (quote defun)
     (macro (a)
       (cons (quote set) (cons (cons (quote quote) (cons (car (cdr a)) nil)) (cons (cons (quote lambda) (cdr (cdr a))) nil)))))

;; IMPLEMENTED USING ONLY PRIMITIVES
(set (quote defmacro)
     (macro (a)
       (cons (quote set) (cons (cons (quote quote) (cons (car (cdr a)) nil)) (cons (cons (quote macro) (cdr (cdr a))) nil)))))

(defun end? (lst)
  (if (atom? lst)
      (if lst
          (print (quote ERROL-not-list))
          t)
      nil))

(defun not (obj) (eq? obj nil))
(set (quote null?) not)
(defun cons? (obj) (not (atom? obj)))
(defun list? (lst)
  (if (atom? lst)
      (if lst nil t)
      t))
(defun zero? (n) (= n 0))

(defun list (() . lst) lst)

(defun list* (arg . others)
  (if (null? others)
      arg
      (if (null? (cdr others))
          (cons arg (car others))
          ((lambda (roop)
             (roop others)
             (cons arg others))
           (lambda (x)
             (if (null? (cdr (cdr x)))
                 (rplacd x (car (cdr x)))
                 (roop (cdr x))))))))
;;; Bootstrapping END

(set 'tests nil)

(defmacro deftest (a))  

;; tests

(defun foo (x) (+ x x))
(aeq 2 (foo 1))
(aeq 1 (1- 2))
(aeq 3 (1+ 2))

(set 'x 1)
(aeq 16 (progn (set 'x 8) (+ x x)))
(aeq 8 x)

(aeq 1 (subst-symbols '<a> '(<a> 1)))
(aeq '(+ 1 2) (subst-symbols '(+ <a> <b>) '(<a> 1 <b> 2)))

(aeq 1 (let () 1))
(set 'q 10)
(aeq 1 (let ((q 1)) q))

(let ((a 1)) (+ a a))
(let ((a 1) (b 2)) (+ a b))
(let ((a 1) (b 2)) (cons a (cons b #(hej din fisk (1 2 3)))))

(let ((a 1) (b 2)) (cons a '(#\W (1231312312312312312312312312312313123 . 5343412914294967296) (<a> <b> <c>) b #(hej din fisk (1 2 3)) "potatismossa" . 12.4)))

(fib-trec 100)

(defun foo (tree replacings)
  (if (atom tree)
      (getf replacings tree tree)
      (cons (foo (car tree) replacings)
            (foo (cdr tree) replacings))))

(defun foo2 (tree replacings)
  (if (atom tree)
      (getf replacings tree tree)
      (foo (cdr tree) replacings)))

(defun foo3 (tree replacings)
  (if (eql? tree nil)
      t
      (progn (prin1 (length tree))
         (prin1 (length replacings))
         (foo3 (cdr tree) (cdr replacings)))))

(defun foo4 (tree replacings)
  (progn
    (prin1 (env-depth))
    (if (atom? tree)
        (progn (prin1 '>>)
               (prin1 (env-depth))
               (prin1 tree)
               (prin1 '<<))
        (progn (prin1 '$)
               (prin1 tree)
               (prin1 (env-depth))
               (prin1 '$)
               (prin1 (car tree))
               (let ((q (car tree))) (foo4 q (cdr replacings)))
               (prin1 '[)
               (prin1 (env-depth))
               (prin1 tree)
               (prin1 '])
               (foo4 (cdr tree) (cdr replacings))))))

(foo4 '(+ <a> <b> <c>) '(<a> 1 <b> 2))
