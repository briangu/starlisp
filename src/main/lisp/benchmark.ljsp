;; WRITE ME (should provide octave-compatible output for benchmarking a single-argument function over an integer range)

(require 'stuff)
(require 'java)

(setq +newline+ #\
)

;; (defun bench (fun range outfile)
;;   (let ((start (first range))
;;         (end (second range))
;;         (step (or (third range) 1)))
;;     (with-open-file (stream outfile out)
;;       (dotimes (i (1+ (- end start)))
;;         (let ((i (* (+ i start) step)))
;;           (write-string (cut-string-at-char (with-output-to-string (*standard-output*)
;;                                               (time (fun i)))
;;                                             +newline+)
;;                         stream)
;;           (write-string " " stream)))
;;       (write-char +newline+ stream))))

(defun min-array (ar)
  (let ((min (field-value Long 'MAX_VALUE)))
    (dotimes (i (length ar))
      (when (< (aref ar i) min)
        (setq min (aref ar i))))
    min))
      
(defun time-fn (fn arg times)
  (let ((result (make-array times)))
    (dotimes (i times)
      (let ((t0 (get-time)))
        (fn arg)
        (aset result i (- (get-time) t0))))
    result))

(defun bench (fun range outfile)
  (let ((start (first range))
        (end (second range))
        (step (or (third range) 1)))
    (with-open-file (stream outfile out)
      (dotimes (i (1+ (/ (- end start) step)))
        (let ((i (* (+ i start) step)))
          (print i)
          (prin1 (min-array (time-fn fun i 30)) stream)
          (write-string " " stream)))
      (write-char +newline+ stream))
    nil))

(provide 'benchmark)
